// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: opcua.proto

package opcuaProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Opcua_ReportOpcua_FullMethodName = "/appProto.Opcua/ReportOpcua"
)

// OpcuaClient is the client API for Opcua service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpcuaClient interface {
	ReportOpcua(ctx context.Context, in *OpcuaMessage, opts ...grpc.CallOption) (*OpcuaResult, error)
}

type opcuaClient struct {
	cc grpc.ClientConnInterface
}

func NewOpcuaClient(cc grpc.ClientConnInterface) OpcuaClient {
	return &opcuaClient{cc}
}

func (c *opcuaClient) ReportOpcua(ctx context.Context, in *OpcuaMessage, opts ...grpc.CallOption) (*OpcuaResult, error) {
	out := new(OpcuaResult)
	err := c.cc.Invoke(ctx, Opcua_ReportOpcua_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpcuaServer is the server API for Opcua service.
// All implementations must embed UnimplementedOpcuaServer
// for forward compatibility
type OpcuaServer interface {
	ReportOpcua(context.Context, *OpcuaMessage) (*OpcuaResult, error)
	mustEmbedUnimplementedOpcuaServer()
}

// UnimplementedOpcuaServer must be embedded to have forward compatible implementations.
type UnimplementedOpcuaServer struct {
}

func (UnimplementedOpcuaServer) ReportOpcua(context.Context, *OpcuaMessage) (*OpcuaResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportOpcua not implemented")
}
func (UnimplementedOpcuaServer) mustEmbedUnimplementedOpcuaServer() {}

// UnsafeOpcuaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpcuaServer will
// result in compilation errors.
type UnsafeOpcuaServer interface {
	mustEmbedUnimplementedOpcuaServer()
}

func RegisterOpcuaServer(s grpc.ServiceRegistrar, srv OpcuaServer) {
	s.RegisterService(&Opcua_ServiceDesc, srv)
}

func _Opcua_ReportOpcua_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpcuaMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpcuaServer).ReportOpcua(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Opcua_ReportOpcua_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpcuaServer).ReportOpcua(ctx, req.(*OpcuaMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Opcua_ServiceDesc is the grpc.ServiceDesc for Opcua service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Opcua_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appProto.Opcua",
	HandlerType: (*OpcuaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReportOpcua",
			Handler:    _Opcua_ReportOpcua_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opcua.proto",
}
