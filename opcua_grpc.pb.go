// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: opcua.proto

package opcuaProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Opcua_Report_FullMethodName = "/appProto.Opcua/Report"
)

// OpcuaClient is the client API for Opcua service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpcuaClient interface {
	Report(ctx context.Context, opts ...grpc.CallOption) (Opcua_ReportClient, error)
}

type opcuaClient struct {
	cc grpc.ClientConnInterface
}

func NewOpcuaClient(cc grpc.ClientConnInterface) OpcuaClient {
	return &opcuaClient{cc}
}

func (c *opcuaClient) Report(ctx context.Context, opts ...grpc.CallOption) (Opcua_ReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &Opcua_ServiceDesc.Streams[0], Opcua_Report_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &opcuaReportClient{stream}
	return x, nil
}

type Opcua_ReportClient interface {
	Send(*Message) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type opcuaReportClient struct {
	grpc.ClientStream
}

func (x *opcuaReportClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *opcuaReportClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpcuaServer is the server API for Opcua service.
// All implementations must embed UnimplementedOpcuaServer
// for forward compatibility
type OpcuaServer interface {
	Report(Opcua_ReportServer) error
	mustEmbedUnimplementedOpcuaServer()
}

// UnimplementedOpcuaServer must be embedded to have forward compatible implementations.
type UnimplementedOpcuaServer struct {
}

func (UnimplementedOpcuaServer) Report(Opcua_ReportServer) error {
	return status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedOpcuaServer) mustEmbedUnimplementedOpcuaServer() {}

// UnsafeOpcuaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpcuaServer will
// result in compilation errors.
type UnsafeOpcuaServer interface {
	mustEmbedUnimplementedOpcuaServer()
}

func RegisterOpcuaServer(s grpc.ServiceRegistrar, srv OpcuaServer) {
	s.RegisterService(&Opcua_ServiceDesc, srv)
}

func _Opcua_Report_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpcuaServer).Report(&opcuaReportServer{stream})
}

type Opcua_ReportServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type opcuaReportServer struct {
	grpc.ServerStream
}

func (x *opcuaReportServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *opcuaReportServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Opcua_ServiceDesc is the grpc.ServiceDesc for Opcua service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Opcua_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appProto.Opcua",
	HandlerType: (*OpcuaServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Report",
			Handler:       _Opcua_Report_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "opcua.proto",
}
